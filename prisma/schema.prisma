// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  phone     String    @unique
  password  String?
  roles     Role      @default(USER)
  profile   Profile?
  provider  Provider?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  token     Token[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  EMPLOYEES
  DELIVERYMAN
}

enum Provider {
  YANDEX
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Profile {
  id        String @id @default(uuid())
  firstName String @map("first_name")
  lastName  String @map("last_name")
  address   String
  user      User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique

  @@map("profiles")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String    @unique
  description String    @db.VarChar(1000)
  price       Int
  image       String?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?

  @@map("products")
}
